import asyncio
import time


async def fun_1(x):
    """
    Перед определениями функций появился префикс async.
    Он говорит интерпретатору, что функция должна выполняться асинхронно.
    """

    print(x ** 2)

    """
    Вместо привычного time.sleep мы использовали asyncio.sleep. Это "неблокирующий sleep".
    В рамках функции ведет себя так же, как традиционный, но не останавливает интерпретатор в целом.
    """

    await asyncio.sleep(3)

    """
    Перед вызовом асинхронных функций появился префикс await.
    Он говорит интерпретатору примерно следующее:
    "я тут возможно немного потуплю, но ты меня не жди — пусть выполняется другой код,
    а когда у меня будет настроение продолжиться, я тебе маякну"
    """

    print('fun_1 the end')


async def fun_2(x):
    """
    Перед определениями функций появился префикс async.
    Он говорит интерпретатору, что функция должна выполняться асинхронно.
    """

    print(x ** .5)

    """
    Вместо привычного time.sleep мы использовали asyncio.sleep. Это "неблокирующий sleep".
    В рамках функции ведет себя так же, как традиционный, но не останавливает интерпретатор в целом.
    """

    await asyncio.sleep(3)
    """
    Перед вызовом асинхронных функций появился префикс await.
    Он говорит интерпретатору примерно следующее:
    "я тут возможно немного потуплю, но ты меня не жди — пусть выполняется другой код,
    а когда у меня будет настроение продолжиться, я тебе маякну"
    """

    print('fun_2 the end')


async def main():
    """
    На базе функций мы при помощи asyncio.create_task создали задачи (что это такое разберем позже)
    и запустили все это при помощи asyncio.run
    """
    task_1 = asyncio.create_task(fun_1(4))  # корутину асинхронной функции fun_1 обернули задачей task_1
    task_2 = asyncio.create_task(fun_2(4))  # корутину асинхронной функции fun_2 обернули задачей task_2

    print(type(task_1))
    print(task_1.__class__.__bases__)

    await task_1  # в асинхронной функции main обозначили точку переключения к задаче task_1
    await task_2  # в асинхронной функции main обозначили точку переключения к задаче task_2


print(time.strftime('%X'))
print(f'{type(fun_1)} тип объекта')
print(f'{type(fun_1(4))} тип возвращённого результата')

asyncio.run(main())  # корутину асинхронной функции main передали в функцию asyncio.run

print(time.strftime('%X'))
